#include <zmq.hpp>
#include <string>
#include <iostream>
#include <thread>
#include <chrono>

void worker_thread(zmq::context_t& context) {
    zmq::socket_t worker(context, ZMQ_DEALER);
    worker.connect("inproc://workers");

    while (true) {
        zmq::message_t request;

        worker.recv(request, zmq::recv_flags::none);   // Receive request

        std::string request_str(static_cast<char*>(request.data()), request.size());
        std::cout << "Received Request: " << request_str << std::endl;

        // Simulate some processing time
        std::this_thread::sleep_for(std::chrono::seconds(1));

        // Process the request and prepare the response
        std::string response_msg = "Response to: " + request_str;

        // Send the response back to the server
        zmq::message_t response(response_msg.size());
        memcpy(response.data(), response_msg.data(), response_msg.size());
        worker.send(response, zmq::send_flags::none); // Send response
    }
}

int main() {
    zmq::context_t context(1);
    zmq::socket_t router(context, ZMQ_ROUTER);
    router.bind("tcp://*:5555");

    // Start worker threads to handle requests
    std::vector<std::thread> worker_threads;
    for (int i = 0; i < 4; ++i) {
        worker_threads.emplace_back(worker_thread, std::ref(context));
    }

    // Main thread acts as the router
    while (true) {
        zmq::message_t identity;
        zmq::message_t delimiter;
        zmq::message_t request;

        router.recv(identity, zmq::recv_flags::none);  // Receive client identity
        router.recv(delimiter, zmq::recv_flags::none); // Receive delimiter
        router.recv(request, zmq::recv_flags::none);   // Receive request

        std::string request_str(static_cast<char*>(request.data()), request.size());
        std::cout << "Received Request from " << request_str << std::endl;

        // Forward the request to a worker (round-robin)
        router.send(identity, zmq::send_flags::sndmore);  // Send client identity
        router.send("", zmq::send_flags::sndmore);         // Send empty delimiter
        router.send(request, zmq::send_flags::none);      // Send request
    }

    // Join worker threads (not reached in this example)
    for (auto& thread : worker_threads) {
        thread.join();
    }

    return 0;
}


