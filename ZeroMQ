#include <zmq.hpp>
#include <string>
#include <iostream>
#include <thread>
#include <vector>

void workerThread(zmq::context_t& context) {
    zmq::socket_t worker(context, ZMQ_REP);
    worker.connect("tcp://*:5565");

    while (true) {
        zmq::message_t request;
        worker.recv(&request);

        std::string request_str(static_cast<char*>(request.data()), request.size());
        std::cout << "Worker Received Request: " << request_str << std::endl;

        // Simulate some processing time
        std::this_thread::sleep_for(std::chrono::seconds(1));

        // Process the request and prepare the response
        std::string response_msg = "Response to: " + request_str;

        // Send the response back to the broker
        zmq::message_t response(response_msg.size());
        memcpy(response.data(), response_msg.data(), response_msg.size());
        worker.send(response);
    }
}

int main() {
    zmq::context_t context(1);
    zmq::socket_t broker(context, ZMQ_ROUTER);
    broker.bind("tcp://*:5555");

    zmq::socket_t workers(context, ZMQ_DEALER);
    workers.bind("tcp://*:5565");

    std::vector<std::thread> workerThreads;
    int numWorkers = 3; // Adjust this to the desired number of worker threads

    for (int i = 0; i < numWorkers; ++i) {
        workerThreads.emplace_back(workerThread, std::ref(context));
    }

    zmq::proxy(broker, workers, nullptr);

    for (int i = 0; i < numWorkers; ++i) {
        workerThreads[i].join();
    }

    return 0;
}
