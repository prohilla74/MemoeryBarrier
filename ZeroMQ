#include <zmq.hpp>
#include <string>
#include <iostream>
#include <thread>
#include <vector>

void workerTask(int workerId) {
    zmq::context_t context(1);
    zmq::socket_t worker(context, ZMQ_PULL);
    worker.connect("inproc://workers");

    while (true) {
        zmq::message_t request;
        worker.recv(&request);

        std::string requestStr(static_cast<char*>(request.data()), request.size());
        std::cout << "Worker " << workerId << " Received Request: " << requestStr << std::endl;

        // Simulate some processing time
        std::this_thread::sleep_for(std::chrono::seconds(1));

        // Process the request and prepare the response
        std::string responseMsg = "Response to: " + requestStr;

        zmq::message_t response(responseMsg.size());
        memcpy(response.data(), responseMsg.data(), responseMsg.size());

        // Send the response back to the server
        zmq::socket_t client(context, ZMQ_PUSH);
        client.connect("inproc://clients");
        client.send(response);
    }
}

int main() {
    zmq::context_t context(1);
    zmq::socket_t server(context, ZMQ_ROUTER);
    server.bind("tcp://*:5555");

    // Create worker threads
    const int numWorkers = 3;
    std::vector<std::thread> workerThreads;
    for (int i = 0; i < numWorkers; ++i) {
        workerThreads.emplace_back(workerTask, i);
    }

    // Create a socket for forwarding responses to clients
    zmq::socket_t forwarder(context, ZMQ_PULL);
    forwarder.bind("inproc://clients");

    while (true) {
        // Receive client identity (first frame)
        zmq::message_t identity;
        server.recv(&identity);

        // Receive empty delimiter (second frame)
        zmq::message_t empty;
        server.recv(&empty);

        // Receive the request (third frame)
        zmq::message_t request;
        server.recv(&request);

        std::string clientIdentity(static_cast<char*>(identity.data()), identity.size());
        std::string requestStr(static_cast<char*>(request.data()), request.size());
        std::cout << "Server Received Request from " << clientIdentity << ": " << requestStr << std::endl;

        // Forward the request to a worker using PULL socket
        forwarder.send(request);
    }

    for (int i = 0; i < numWorkers; ++i) {
        workerThreads[i].join();
    }

    return 0;
}
