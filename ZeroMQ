#include <zmq.hpp>
#include <string>
#include <iostream>
#include <thread>
#include <chrono>
#include <vector>

const int numWorkerThreads = 5;

void workerThread(zmq::context_t& context) {
    zmq::socket_t worker(context, ZMQ_DEALER);
    worker.connect("inproc://workers");

    while (true) {
        zmq::message_t identity;
        zmq::message_t request;
        worker.recv(&identity, ZMQ_SNDMORE); // Receive client identity
        worker.recv(&request);              // Receive request

        std::string request_str(static_cast<char*>(request.data()), request.size());
        std::cout << "Worker Received Request: " << request_str << std::endl;

        // Simulate some processing time
        std::this_thread::sleep_for(std::chrono::seconds(1));

        // Process the request and prepare the response
        std::string response_msg = "Response to: " + request_str;

        // Send the response back to the client using the identity
        zmq::message_t response(response_msg.size());
        memcpy(response.data(), response_msg.data(), response_msg.size());
        worker.send(identity, ZMQ_SNDMORE); // Send client identity
        worker.send(response);
    }
}

int main() {
    zmq::context_t context(1);
    zmq::socket_t server(context, ZMQ_ROUTER);
    server.bind("tcp://*:5555");

    // Create and start worker threads
    std::vector<std::thread> workerThreads;
    for (int i = 0; i < numWorkerThreads; ++i) {
        workerThreads.emplace_back(workerThread, std::ref(context));
    }

    while (true) {
        zmq::message_t identity;
        zmq::message_t request;
        server.recv(&identity, ZMQ_SNDMORE); // Receive client identity
        server.recv(&request);              // Receive request

        // Forward the request to a worker thread for processing
        zmq::socket_t worker(context, ZMQ_DEALER);
        worker.connect("inproc://workers");
        worker.send(identity, ZMQ_SNDMORE); // Forward client identity
        worker.send(request);

        // Note: You can add additional logic here if needed

        // If you want the main thread to continue processing requests,
        // you can omit this loop and handle requests asynchronously
    }

    for (int i = 0; i < numWorkerThreads; ++i) {
        workerThreads[i].join();
    }

    return 0;
}
