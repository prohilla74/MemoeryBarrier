#include <zmq.hpp>
#include <string>
#include <iostream>
#include <thread>
#include <chrono>
#include <unordered_map>

std::unordered_map<std::string, zmq::socket_t*> clients;

void client_handler(zmq::socket_t* client) {
    while (true) {
        zmq::message_t identity;
        zmq::message_t delimiter;
        zmq::message_t request;

        client->recv(&identity);
        client->recv(&delimiter);
        client->recv(&request);

        std::string request_str(static_cast<char*>(request.data()), request.size());
        std::cout << "Received Request from Client " << identity.to_string() << ": " << request_str << std::endl;

        // Simulate some processing time
        std::this_thread::sleep_for(std::chrono::seconds(1));

        // Process the request and prepare the response
        std::string response_msg = "Response to: " + request_str;

        // Send the response back to the client
        zmq::message_t response(response_msg.size());
        memcpy(response.data(), response_msg.data(), response_msg.size());

        // Send the identity of the client before the response
        client->send(identity, ZMQ_SNDMORE);
        client->send(delimiter, ZMQ_SNDMORE);
        client->send(response);
    }
}

int main() {
    zmq::context_t context(1);
    zmq::socket_t server(context, ZMQ_ROUTER);
    server.bind("tcp://*:5555");

    while (true) {
        zmq::message_t identity;
        zmq::message_t delimiter;
        zmq::message_t request;

        server.recv(&identity);
        server.recv(&delimiter);
        server.recv(&request);

        std::string client_identity = identity.to_string();
        if (clients.find(client_identity) == clients.end()) {
            zmq::socket_t* client = new zmq::socket_t(context, ZMQ_ROUTER);
            client->setsockopt(ZMQ_IDENTITY, client_identity.c_str(), client_identity.size());
            client->connect("inproc://workers");
            clients[client_identity] = client;

            std::thread(client_handler, client).detach();
        }

        zmq::socket_t* client = clients[client_identity];

        // Forward the request to the client
        client->send(identity, ZMQ_SNDMORE);
        client->send(delimiter, ZMQ_SNDMORE);
        client->send(request);
    }

    return 0;
}
