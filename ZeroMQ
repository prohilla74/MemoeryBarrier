#include <zmq.hpp>
#include <string>
#include <iostream>
#include <thread>
#include <vector>

void handleWorker(zmq::socket_t* broker) {
    while (true) {
        zmq::message_t identity;
        zmq::message_t request;

        broker->recv(&identity);
        broker->recv(&request);

        std::string request_str(static_cast<char*>(request.data()), request.size());
        std::cout << "Received Request from Worker: " << request_str << std::endl;

        // Simulate some processing time
        std::this_thread::sleep_for(std::chrono::seconds(1));

        // Process the request and prepare the response
        std::string response_msg = "Response to: " + request_str;

        // Send the response back to the broker
        zmq::message_t response(response_msg.size());
        memcpy(response.data(), response_msg.data(), response_msg.size());

        broker->send(identity, ZMQ_SNDMORE);
        broker->send(response);
    }
}

int main() {
    zmq::context_t context(1);
    zmq::socket_t broker(context, ZMQ_ROUTER);
    broker.bind("tcp://*:5555");

    std::vector<std::thread> workerThreads;

    // Start multiple worker threads to handle requests
    int num_workers = 3; // Adjust this to the desired number of worker threads
    for (int i = 0; i < num_workers; ++i) {
        workerThreads.emplace_back(handleWorker, &broker);
    }

    // Main loop to route requests to workers
    while (true) {
        zmq::message_t identity;
        zmq::message_t request;

        broker.recv(&identity);
        broker.recv(&request);

        // Forward the request to a worker (DEALER) using the identity
        broker.send(identity, ZMQ_SNDMORE);
        broker.send(request);
    }

    // Join the worker threads
    for (int i = 0; i < num_workers; ++i) {
        workerThreads[i].join();
    }

    return 0;
}
