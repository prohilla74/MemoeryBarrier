

#include <iostream>
#include <chrono>
#include <ctime>
#include <iomanip>
#include <sstream>

std::string getCurrentTimestamp() {
    // Get the current time point with millisecond precision
    auto now = std::chrono::system_clock::now();
    auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(now.time_since_epoch()) % 1000;

    // Convert the time point to a time_t object
    std::time_t currentTime = std::chrono::system_clock::to_time_t(now);

    // Convert the time_t to a tm structure
    std::tm *timeInfo = std::localtime(&currentTime);

    // Format the tm structure into a readable string with milliseconds
    char buffer[80];  // Adjust the size if necessary
    std::strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", timeInfo);

    std::stringstream ss;
    ss << buffer << '.' << std::setw(3) << std::setfill('0') << ms.count();

    return ss.str();
}

int main() {
    std::cout << "Current timestamp: " << getCurrentTimestamp() << std::endl;
    return 0;
}



#include <zmq.hpp>
#include <string>
#include <iostream>
#include <thread>

void workerTask(zmq::context_t& context) {
    zmq::socket_t worker(context, ZMQ_DEALER);
    worker.connect("inproc://workers");

    while (true) {
        zmq::message_t identity;
        zmq::message_t delimiter;
        zmq::message_t request;

        worker.recv(&identity);
        worker.recv(&delimiter);
        worker.recv(&request);

        std::string request_str(static_cast<char*>(request.data()), request.size());
        std::cout << "Worker Received Request: " << request_str << std::endl;

        // Simulate some processing time
        std::this_thread::sleep_for(std::chrono::seconds(1));

        // Process the request and prepare the response
        std::string response_msg = "Response to: " + request_str;

        // Send the response back to the client
        worker.send(identity, ZMQ_SNDMORE);
        worker.send(delimiter, ZMQ_SNDMORE);
        zmq::message_t response(response_msg.size());
        memcpy(response.data(), response_msg.data(), response_msg.size());
        worker.send(response);
    }
}

int main() {
    zmq::context_t context(1);
    zmq::socket_t router(context, ZMQ_ROUTER);
    router.bind("tcp://*:5555");

    zmq::socket_t workers(context, ZMQ_DEALER);
    workers.bind("inproc://workers");

    std::thread workerThread(workerTask, std::ref(context));

    zmq::proxy(router, workers, nullptr);

    workerThread.join();

    return 0;
}


-- client

#include <zmq.hpp>
#include <string>
#include <iostream>

int main() {
    zmq::context_t context(1);
    zmq::socket_t dealer(context, ZMQ_DEALER);
    dealer.connect("tcp://localhost:5555");

    for (int i = 0; i < 5; ++i) {
        // Send a request to the Router (Server)
        std::string request_msg = "Client Request " + std::to_string(i);
        zmq::message_t request_identity;
        zmq::message_t delimiter("");
        zmq::message_t request_payload(request_msg.size());

        // Set the payload
        memcpy(request_payload.data(), request_msg.data(), request_msg.size());

        dealer.send(request_identity, ZMQ_SNDMORE);
        dealer.send(delimiter, ZMQ_SNDMORE);
        dealer.send(request_payload);

        // Receive and process the response from the Router (Server)
        zmq::message_t response_identity;
        dealer.recv(&response_identity);
        dealer.recv(&delimiter); // Receive and discard the delimiter
        zmq::message_t response_payload;
        dealer.recv(&response_payload);

        std::string response_str(static_cast<char*>(response_payload.data()), response_payload.size());
        std::cout << "Client Received Response: " << response_str << std::endl;
    }

    return 0;
}



int main() {
    // Native socket
    int nativeSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (nativeSocket == -1) {
        perror("Error creating socket");
        return 1;
    }

    // Set TCP_NODELAY option
    int flag = 1;
    if (setsockopt(nativeSocket, IPPROTO_TCP, TCP_NODELAY, &flag, sizeof(int)) == -1) {
        perror("Error setting TCP_NODELAY");
        close(nativeSocket);
        return 1;
    }

    // ZeroMQ context and socket
    zmq::context_t context(1);
    zmq::socket_t zmqSocket(context, ZMQ_PULL);
    zmqSocket.setsockopt(ZMQ_FD, &nativeSocket, sizeof(nativeSocket));

    // ... (rest of your application logic) ...

    return 0;
}
In this example, the native socket is created and the TCP_NODELAY option is set. The ZeroMQ socket is then associated with this native socket. Please adapt this code to your specific requirements and test it thoroughly to ensure the desired behavior on your platform and ZeroMQ version.

-- client 
#include <zmq.hpp>
#include <iostream>

int main() {
    // Prepare the ZeroMQ context
    zmq::context_t context(1);

    // Create a DEALER socket with CurveZMQ security
    zmq::socket_t dealer(context, ZMQ_DEALER);

    // Set the client's long-term secret key (hardcoded for testing)
    const std::string clientKey = "client-secret-key";
    dealer.setsockopt(ZMQ_CURVE_SECRETKEY, clientKey.c_str(), clientKey.size());

    // Set the server's public key (hardcoded for testing)
    const std::string serverPublicKey = "server-public-key";
    dealer.setsockopt(ZMQ_CURVE_SERVERKEY, serverPublicKey.c_str(), serverPublicKey.size());

    // Connect to the REP socket through the proxy
    dealer.connect("tcp://127.0.0.1:5555");

    // Send and receive messages
    for (int i = 0; i < 5; ++i) {
        // Send a message to the proxy (which forwards it to the server)
        std::string message = "Hello, server! #" + std::to_string(i);
        dealer.send(message.data(), message.size(), 0);

        // Receive the echoed message from the server through the proxy
        zmq::message_t echoedMessage;
        dealer.recv(&echoedMessage);

        // Print the echoed message
        std::string echoedMessageStr(static_cast<char*>(echoedMessage.data()), echoedMessage.size());
        std::cout << "Received echoed message: " << echoedMessageStr << std::endl;
    }

    return 0;
}


------

#include <zmq.hpp>
#include <iostream>
#include <thread>

void workerThread() {
    // Prepare the ZeroMQ context
    zmq::context_t context(1);

    // Create a REP socket with CurveZMQ security
    zmq::socket_t worker(context, ZMQ_REP);
    worker.setsockopt(ZMQ_CURVE_SERVER, 1);  // Configure as CurveZMQ server

    // Set the server's long-term secret key (hardcoded for testing)
    const std::string serverKey = "server-secret-key";
    worker.setsockopt(ZMQ_CURVE_SECRETKEY, serverKey.c_str(), serverKey.size());

    // Connect the worker to the proxy
    worker.connect("inproc://worker");

    // Loop to handle incoming messages
    while (true) {
        zmq::message_t identity;
        zmq::message_t message;

        worker.recv(&identity);
        worker.recv(&message);

        // Process the message (in this example, just echo it back)
        worker.send(identity, ZMQ_SNDMORE);
        worker.send(message, 0);
    }
}

int main() {
    // Start the worker thread
    std::thread workerThreadObj(workerThread);

    // Prepare the ZeroMQ context
    zmq::context_t context(1);

    // Create a REP socket with CurveZMQ security
    zmq::socket_t rep(context, ZMQ_REP);
    rep.setsockopt(ZMQ_CURVE_SERVER, 1);  // Configure as CurveZMQ server

    // Set the server's long-term secret key (hardcoded for testing)
    const std::string serverKey = "server-secret-key";
    rep.setsockopt(ZMQ_CURVE_SECRETKEY, serverKey.c_str(), serverKey.size());

    // Bind the REP socket
    rep.bind("tcp://127.0.0.1:5555");

    // Create a worker socket
    zmq::socket_t worker(context, ZMQ_REP);
    worker.bind("inproc://worker");

    // Start the proxy (handles the forwarding logic)
    zmq::proxy(static_cast<void*>(rep), static_cast<void*>(worker), nullptr);

    // Join the worker thread
    workerThreadObj.join();

    return 0;
}




