libExample.h

  #ifndef LIB_EXAMPLE_H
#define LIB_EXAMPLE_H

#if defined(__cplusplus)
extern "C" {
#endif

// Function that takes a pointer as an argument
void processData(void* data);

#if defined(__cplusplus)
}
#endif

#endif // LIB_EXAMPLE_H


  lib_example.cpp:
#include "lib_example.h"
#include <iostream>

#if defined(_WIN32)
#define EXPORT __declspec(dllexport)
#else
#define EXPORT
#endif

EXPORT void processData(void* data) {
    // Cast the void pointer to the appropriate type
    int* intPtr = static_cast<int*>(data);

    // Use the data in the shared library
    std::cout << "Data received in shared library: " << *intPtr << std::endl;
}


main.cpp 

 #include <iostream>

#ifdef _WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif

int main() {
    // Load the dynamic library
    #ifdef _WIN32
    HMODULE libraryHandle = LoadLibrary("example_lib.dll");
    #else
    void* libraryHandle = dlopen("./libexample_lib.so", RTLD_LAZY);
    #endif

    if (!libraryHandle) {
        std::cerr << "Error loading library" << std::endl;
        return 1;
    }

    // Function pointer for processData function
    using ProcessDataFunc = void (*)(void*);

    #ifdef _WIN32
    ProcessDataFunc processDataFunc = reinterpret_cast<ProcessDataFunc>(GetProcAddress(libraryHandle, "processData"));
    #else
    ProcessDataFunc processDataFunc = reinterpret_cast<ProcessDataFunc>(dlsym(libraryHandle, "processData"));
    #endif

    if (!processDataFunc) {
        std::cerr << "Error loading processData" << std::endl;
        #ifdef _WIN32
        FreeLibrary(libraryHandle);
        #else
        dlclose(libraryHandle);
        #endif
        return 1;
    }

    // Data to pass to the shared library
    int data1 = 42;
    int data2 = 77;

    // Pass the pointer to the shared library
    processDataFunc(&data1);
    processDataFunc(&data2);

    // Close the library
    #ifdef _WIN32
    FreeLibrary(libraryHandle);
    #else
    dlclose(libraryHandle);
    #endif

    return 0;
}



bash 

  # Compile the shared library
g++ -shared -fPIC lib_example.cpp -o libexample_lib.so

# Compile the main application
g++ main.cpp -ldl -o main

# Run the executable
./main



#include <iostream>
#include <vector>
#include <nlohmann/json.hpp>

// Define the Person struct
struct Person {
    std::string name;
    int age;

    // Define from_json and to_json functions for Person
    static void from_json(const nlohmann::json& j, Person& person) {
        j.at("name").get_to(person.name);
        j.at("age").get_to(person.age);
    }

    static void to_json(nlohmann::json& j, const Person& person) {
        j = nlohmann::json{{"name", person.name}, {"age", person.age}};
    }
};

// Define the ModelSelector struct
struct ModelSelector {
    std::vector<Person> persons;

    // Define from_json and to_json functions for ModelSelector
    static void from_json(const nlohmann::json& j, ModelSelector& modelSelector) {
        j.at("persons").get_to(modelSelector.persons);
    }

    static void to_json(nlohmann::json& j, const ModelSelector& modelSelector) {
        j = nlohmann::json{{"persons", modelSelector.persons}};
    }
};

int main() {
    // Create a ModelSelector object
    ModelSelector modelSelector;
    modelSelector.persons = {
        {"Alice", 25},
        {"Bob", 30},
        {"Charlie", 22}
    };

    // Serialize the ModelSelector to JSON
    nlohmann::json jsonModelSelector = modelSelector;

    // Print the serialized JSON for ModelSelector
    std::cout << "Serialized JSON for ModelSelector:\n" << jsonModelSelector.dump(2) << "\n\n";

    // Deserialize ModelSelector from JSON
    ModelSelector deserializedModelSelector = jsonModelSelector.get<ModelSelector>();

    // Print the deserialized ModelSelector
    std::cout << "Deserialized ModelSelector:\n";
    for (const auto& person : deserializedModelSelector.persons) {
        std::cout << "Name: " << person.name << ", Age: " << person.age << "\n";
    }

    return 0;
}

